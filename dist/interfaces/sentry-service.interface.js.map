{"version":3,"file":"sentry-service.interface.js","sourceRoot":"/","sources":["interfaces/sentry-service.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { Breadcrumb, Severity, Scope, User } from \"@sentry/node\";\n\nexport interface ISentryService {\n    /**\n      * Records a new breadcrumb which will be attached to future events.\n      *\n      * Breadcrumbs will be added to subsequent events to provide more context on\n      * user's actions prior to an error or crash.\n      *\n      * @param breadcrumb The breadcrumb to record.\n    */\n    addBreadcrumb(breadcrumb: Breadcrumb): void;\n    /**\n      * Captures an exception event and sends it to Sentry.\n      *\n      * @param exception An exception-like object.\n      * @returns The generated eventId.\n    */\n    captureException(exception: any): string;\n    /**\n      * Captures a manually created event and sends it to Sentry.\n      *\n      * @param event The event to send to Sentry.\n      * @returns The generated eventId.\n    */\n    captureEvent(event: Event): string;\n    /**\n      * Callback to set context information onto the scope.\n      * @param callback Callback function that receives Scope.\n    */\n    configureScope(callback: (scope: Scope) => void): void;\n    /**\n      * Captures a message event and sends it to Sentry.\n      *\n      * @param message The message to send to Sentry.\n      * @param level Define the level of the message.\n      * @returns The generated eventId.\n    */\n    captureMessage(message: string, level?: Severity|undefined): string;\n    /**\n      * Sets context data with the given name.\n      * @param name of the context\n      * @param context Any kind of data. This data will be normailzed.\n    */\n    setContext(name: string, context: {\n      [key: string]: any;\n    } | null): void;\n    /**\n      * Set an object that will be merged sent as extra data with the event.\n      * @param extras Extras object to merge into current context.\n    */\n    setExtras(extras: {\n      [key: string]: any;\n    }): void;\n    /**\n      * Set an object that will be merged sent as tags data with the event.\n      * @param tags Tags context object to merge into current context.\n    */\n    setTags(tags: {\n      [key: string]: string;\n    }): void;\n    /**\n      * Set key:value that will be sent as extra data with the event.\n      * @param key String of extra\n      * @param extra Any kind of data. This data will be normailzed.\n    */\n    setExtra(key: string, extra: any): void;\n    /**\n      * Set key:value that will be sent as tags data with the event.\n      * @param key String key of tag\n      * @param value String value of tag\n    */\n    setTag(key: string, value: string): void;\n    /**\n      * Updates user context information for future events.\n      *\n      * @param user User context object to be set in the current context. Pass `null` to unset the user.\n    */\n    setUser(user: User | null): void;\n    /**\n      * Creates a new scope with and executes the given operation within.\n      * The scope is automatically removed once the operation\n      * finishes or throws.\n      *\n      * This is essentially a convenience function for:\n      *\n      *     pushScope();\n      *     callback();\n      *     popScope();\n      *\n      * @param callback that will be enclosed into push/popScope.\n    */\n    withScope(callback: (scope: Scope) => void): void;\n    /**\n      * Calls a function on the latest client. Use this with caution, it's meant as\n      * in \"internal\" helper so we don't need to expose every possible function in\n      * the shim. It is not guaranteed that the client actually implements the\n      * function.\n      *\n      * @param method The method to call on the client/client.\n      * @param args Arguments to pass to the client/fontend.\n    */\n    _callOnClient(method: string, ...args: any[]): void;\n  }"]}